# DeliteAI Project Cursor Rules

You are an AI assistant helping with the DeliteAI project - an on-device AI platform for building agentic workflows on mobile devices. This is a complex multi-language project with strict quality standards.

## Project Overview

DeliteAI is a cross-platform on-device AI SDK that enables:
- Privacy-first AI processing without cloud dependencies
- Agentic workflows with tool calling, memory, and LLMs
- Cross-platform compatibility (Android/iOS/Python)
- High-performance, resource-optimized mobile AI experiences

## Core Architecture

- **coreruntime/**: C++ core SDK with Python bindings (delitepy)
- **sdks/android/**: Android SDK with Kotlin/Java APIs
- **sdks/ios/**: iOS SDK with Swift/Objective-C APIs
- **agents/**: Python-based AI agents marketplace
- **nimblenet_py/**: Python simulation and testing framework
- **docs/**: Sphinx-based documentation system

## Development Principles

### 1. Code Quality & Standards
- Follow existing code style religiously (.clang-format for C++, .editorconfig)
- All commits must include DCO sign-off (`git commit -s`)
- Write clear, maintainable code with comprehensive error handling
- Include appropriate tests and update documentation
- Use descriptive commit messages and reference related issues

### 2. Cross-Platform Consistency
- Maintain API parity across Android, iOS, and Python platforms
- Use consistent naming conventions across all languages
- Ensure feature implementations work identically on all platforms
- Test thoroughly on resource-constrained mobile environments

### 3. Performance & Privacy
- Optimize for mobile device constraints (CPU, memory, battery)
- Ensure all AI processing remains on-device
- Minimize memory allocations in hot paths
- Use efficient algorithms suitable for mobile hardware

### 4. Build System Awareness
- Understand CMake structure for C++ components
- Respect Gradle configuration for Android
- Follow CocoaPods conventions for iOS
- Use proper Python packaging standards

## Language-Specific Guidelines

### C++ (coreruntime/)
- Follow Google C++ style guide via .clang-format
- Use RAII and smart pointers consistently
- Minimize dependencies and keep headers lightweight
- Include comprehensive error handling with proper exception safety
- Use modern C++17/20 features where appropriate

### Python (agents/, nimblenet_py/, delitepy/)
- Follow PEP 8 style guide (enforced by ruff)
- Use type hints consistently
- Include docstrings for all public APIs
- Handle exceptions gracefully with proper error messages
- Use virtual environments and proper dependency management

### Swift/Objective-C (sdks/ios/)
- Follow Apple's Swift style guidelines
- Use proper memory management (ARC)
- Include comprehensive error handling
- Use modern Swift features and avoid force unwrapping
- Maintain Objective-C compatibility where needed

### Kotlin/Java (sdks/android/)
- Follow Android Kotlin style guide
- Use coroutines for asynchronous operations
- Include proper lifecycle management
- Handle permissions and security properly
- Use modern Android APIs and Jetpack components

## File Organization

### Include Patterns
- C++ headers: `#include "relative/path/header.hpp"`
- Python imports: `import delitepy` or `from agents import ...`
- Swift imports: `import DeliteAI`
- Android imports: `import ai.delite.sdk.*`

### Directory Structure Respect
- Keep platform-specific code in respective SDK directories
- Share common C++ code through coreruntime
- Place reusable Python code in appropriate modules
- Maintain clean separation between core and platform layers

## Testing & Validation

### Testing Requirements
- Unit tests for all new functionality
- Integration tests for cross-platform features
- Performance tests for mobile optimization
- End-to-end tests for complete workflows

### Validation Process
- Build and test on all target platforms
- Verify memory usage and performance metrics
- Test on actual mobile devices when possible
- Validate API consistency across platforms

## Documentation Standards

### Code Documentation
- Include comprehensive inline comments
- Document all public APIs with examples
- Explain complex algorithms and design decisions
- Update documentation with any API changes

### Project Documentation
- Use MyST Markdown for Sphinx documentation
- Include code examples that actually work
- Maintain up-to-date installation instructions
- Document configuration options thoroughly

## Security & Privacy

### Security Considerations
- Never expose internal implementation details
- Validate all inputs thoroughly
- Use secure coding practices consistently
- Audit third-party dependencies regularly

### Privacy Requirements
- Ensure all data processing remains on-device
- Never transmit user data without explicit consent
- Implement proper data encryption for stored data
- Follow platform-specific privacy guidelines

## Common Pitfalls to Avoid

1. **Breaking Cross-Platform Parity**: Always implement features consistently across all platforms
2. **Ignoring Mobile Constraints**: Always consider memory, CPU, and battery implications
3. **Poor Error Handling**: Never let errors propagate without proper handling
4. **Inconsistent APIs**: Maintain naming and behavior consistency across languages
5. **Documentation Drift**: Always update docs when changing APIs or behavior

## Getting Started

When working on this project:
1. Read the specific component's README first
2. Understand the build system for your target platform
3. Run existing tests to ensure nothing breaks
4. Follow the contributing guidelines in CONTRIBUTING.md
5. Ask for clarification on unclear requirements

## Version Management

- SDK version is managed centrally in config.yml
- Follow semantic versioning for public releases
- Coordinate version bumps across all platforms
- Update changelog with significant changes

Remember: DeliteAI enables developers to build privacy-first AI experiences. Every change should enhance that mission while maintaining the highest quality standards. 